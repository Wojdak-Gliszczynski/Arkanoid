https://www.youtube.com/watch?v=s6coimOZwtY&feature=youtu.be

Na wstêpie chcia³bym napisaæ, i¿ wszystkie za³o¿enia z pliku "wstepny opis.txt" zosta³y pomyœlnie wdro¿one.
Mamy zatem wykonan¹ sam¹ rozgrywkê (platforma, pi³eczki, cegie³ki), oraz posiadamy w niej takie elementy rozgrywki jak zestaw bonusów wypadaj¹cych losowo ze zniszczonych cegie³ek i 5 typów cegie³ek. Ponadto stworzyliœmy zestaw 15 poziomów, które mo¿na modyfikowaæ i dodawaæ kolejne (wystarczy za nazw¹ poziomu dodaæ kolejn¹ liczbê nastêpuj¹c¹ po ostatnim).
Po ka¿dej zakoñczonej rozgrywce algorytm sprawdza, czy osi¹gnêliœmy wynik lepszy ni¿ 10 najlepszych wyników z tabeli wyników i jeœli osi¹gnêliœmy, dodaje go do tabeli wyników. Sam¹ tabelê wyników mo¿na zobaczyæ z poziomu Menu G³ównego.
Poza Menu G³ównym, w naszym projekcie istnieje równie¿ Menu w Grze po którego uruchomieniu zatrzymujemy rozgrywkê. Z poziomu Menu w Grze mo¿emy wznowiæ grê lub j¹ zakoñczyæ.
Ostatni¹ cech¹ któr¹ miêliœmy dodaæ s¹ dŸwiêki w grze i takowe równie¿ dodaliœmy do rozgrywki. Ponadto dodaliœmy równie¿ muzykê w tle, która odtwarza siê tylko podczas rozgrywki.

Szczegó³owy opis wszystkich klas w grze:
-klasa Ball - klasa odpowiedzialna za pojedyñcz¹ pi³eczkê w grze, dziedzicz¹ca po klasie TransforminImage. Posiada ona 3 konstruktory, które wykorzystuje siê zale¿nie od sytuacji. Pierwszy s³u¿y do tworzenia pi³eczki na pocz¹tku poziomu (przyklejona do platformy), drugi (konstruktor kopiuj¹cy) s³u¿y do powielenia pi³eczki po podniesieniu bonusu podwajaj¹cego iloœæ pi³eczek (po powieleniu pi³eczki zmieniaj¹ swój k¹t lotu), natomiast trzeci s³u¿y do utworzenia pi³eczki po zniszczeniu cegie³ki z pi³eczk¹. Mechanikê lotu pi³eczki oparliœmy o szybkoœæ jej lotu oraz k¹t pod jakim siê porusza (w radianach). Do wyci¹gniêcia prêdkoœci poruszania siê pi³eczki na osiach X i Y, skorzystaliœmy z funkcji trygonometrycznych sin i cos. Klasa Ball posiada metody odpowiedzialne za przyspieszanie i spowalnianie pi³eczki, za zwiêkszenie i zmniejszenie jej rozmiarów, oraz za przyklejenie i odklejenie jej od platformy, które wykorzystaliœmy przy tworzeniu bonusów. Pi³eczka posiada metodê "odbicia" jej od innego elementu, któr¹ nale¿y wywo³aæ po zderzeniu pi³eczki z innym elementem rozgrywki (jeœli chcemy, aby odbi³a siê od tego elementu). Klasa posiada gettery i settery dla instancji odpowiedzialnych za szybkoœæ i k¹t lotu platformy. Szybkoœæ mo¿e byæ stosowana w przedziale <2; 6>, a k¹t <0; 2PI>. Przedzia³y s¹ odpowiednio dostosowywane, jeœli do instancji przypisaliœmy liczbê wychodz¹c¹ poza zakres.
-klasa Bonus - klasa odpowiedzialna za pojedyñczy bonus w grze, dziedzicz¹ca po klasie TransformingImage. Posiada ona swój w³asny typ wyliczeniowy z nazwami wszystkich 13 typów bonusów. Klasa Bonus ma jeden konstruktor. Posiada równie¿ metody statyczne odpowiedzialne za samo tworzenie bonusu. Oparte s¹ one o system liczb pseudolosowych i zwracaj¹ wartoœci: czy bonus ma w ogóle powstaæ po zniszczeniu cegie³ki oraz który bonus zosta³ wylosowany. W klasie Bonus istnieje równie¿ metoda odpowiedzialna za utworzenie efektu, który nast¹pi po kolizji bonusu z platform¹ (za u¿ycie bonusu w grze, ale nie za kolizjê "bonus-platforma").
-Klasa Brick - klasa odpowiedzialna za pojedyñcz¹ cegie³kê w grze, dziedzicz¹ca po klasie TransformingImage. Posiada ona swoje dwa typy wyliczeniowe. Pierwszy odpowiedzialny za nazwy wszystkich 5 typów cegie³ek, a drugi za nazwy wszystkich 10 kolorów cegie³ek. W klasie tej istnieje jeden konstruktor, który wykorzystuje siê przy tworzeniu poziomu w klasie Level. Posiada prywatn¹ metodê statyczn¹ z której mo¿na wyci¹gn¹æ œcie¿kê do pliku grafiki cegie³ki wstawiaj¹c do argumentów metody zmienne odpowiedzialne za typ i kolor cegie³ki. Ma ona równie¿ metodê odpowiedzialn¹ za kolizje "cegie³ka-pi³eczka", oraz "cegie³ka-wybuch". Klasa posiada gettery dla instancji odpowiedzialnych za typ i kolor danej cegie³ki.
-Klasa Explosion - klasa odpowiedzialna za pojedyñczy wybuch spowodowany zniszczeniem cegie³ki typu TNT, dziedzicz¹ca po klasie TransformingImage. Posiada ona swój konstruktor w którym tworzy siê obszar wybuchu, niszczone s¹ cegie³ki na obszarze wybuchu, oraz uruchamia siê timer, po którego odliczeniu uruchamia siê metoda klasy Explosion odpowiedzialna za usuniêcie grafiki wybuchu z siatki okna.
-Klasa GameControl - klasa odpowiedzialna za przebieg rozgrywki. Posiada metody odpowiedzialne za rozpoczêcie rozgrywki, zakoñczenie rozgrywki, przejœcie miêdzy poziomami, oraz resetowanie poziomu po utracie ¿ycia. Ma równie¿ metody i instancje odpowiedzialne za iloœæ punktów, ¿yæ, aktualny poziom i metody odpowiedzialne za wyœwietlanie tych instancji. Za pomoc¹ klasy GameControl mo¿na równie¿ odtworzyæ dŸwiêk w rozgrywce. Klasa posiada getter odpowiedzialny za iloœæ punktów w rozgrywce.
-Klasa Level - klasa odpowiedzialna za tworzenie poziomów. Tworzenie poziomów dzieli siê na dwa etapy: czyszczenie poziomu (usuniêcie wszystkich elementów poziomu z siatki okna i z list tych elementów) i wczytaniu poziomu z pliku. Je¿eli brakuje pliku z poziomem, funkcja wczytuj¹ca zwraca wartoœæ false.
-Klasa MainWindow - klasa odpowiedzialna za dzia³ania na elementach znajduj¹cych siê w oknie g³ównym programu, oraz za dzia³anie pêtli g³ównej rozgrywki, dziedzicz¹ca po klasie Window. W tej klasie posiadamy funkcje Menu G³ównego odpowiedzialne za dzia³ania na tabeli wyników (wyœwietlanie, odœwie¿anie oraz zapis i odczyt z pliku), wyœwietlanie i ukrywanie elementów podczas przechodzenia miêdzy menu, dzia³ania na przyciskach, oraz metody tworz¹ce elementy okna (Kolumny TextBox'ów, etykiety, prostok¹ty i przyciski). Istniej¹ tutaj równie¿ funkcje Menu w Grze (uruchamianego po wciœniêciu przycisku Escape podczas rozgrywki) odpowiedzialne za samo wyœwietlanie i chowanie okna, oraz dzia³anie na przyciskach w tym menu. Klasa MainWindow posiada równie¿ funckje odpowiedzialne za elementy rozgrywki wyœwietlane w oknie programu. Za ich pomoc¹ mo¿na zatrzymaæ i wznowiæ grê (zatrzymanie/wznowienie pêtli g³ównej programu), rozpocz¹æ i zakoñczyæ rozgrywkê i stworzyæ œcianki. W tej klasie posiadamy wszystkie elementy rozgrywki (listy obiektów znajduj¹cych siê w rozgrywce), oraz pêtlê g³ówn¹ programu, która dzia³a na wszystkich elementach rozgrywki, korzystaj¹c z metod utworzonych w klasach rozgrywki. Klasa korzysta z metod WPF-a (przyciski, okno, etykiety, muzyka).
-Klasa Platform - klasa odpowiedzialna za platformê w grze. Posiada trzy oddzielne obiekty TransformingImage dla ka¿dego elementu platformy (lewa, œrodkowa i prawa czêœæ platformy). Posiada jeden konstruktor wywo³ywany na pocz¹tku ka¿dego poziomu. Do tej klasy zosta³y dodane funkcje kontroli platformy odpowiedzialne za przesuwanie ca³ej platformy (wszystkich trzech elementów), przesuwanie przyklejonych do platformy pi³eczek, oraz jedn¹ funkcjê odpowiedzialn¹ za przesuwanie zarówno platformy, jak i przyklejonych do niej pi³eczek. Sterowanie platform¹ polega na pod¹¿aniu platformy za wskaŸnikiem myszy z aktualn¹ jej prêdkoœci¹. W klasie Platform wystêpuje równie¿ system kolizji "platforma-pi³eczka", oraz "platforma-bonus". Pi³eczki które koliduj¹ z platform¹, odbijaj¹ siê od niej pod k¹tem zale¿nym od tego z której czêœci platformy zosta³y odbite, a bonusy zostaj¹ u¿yte w sposób zgodny z metod¹ u¿ycia bonusu w klasie Bonus i zostaj¹ usuniête. Ponadto klasa Platform posiada metody odpowiedzialne za zmianê rozmiarów platformy, wykorzystywane przy u¿ywaniu bonusów, oraz za odklejenie pi³eczek od platformy. Posiada ona getter i setter dla instancji odpowiedzialnej za prêdkoœæ platformy (równie¿ u¿ywane w klasie Bonus).
-Klasa Scoreboard - klasa odpowiedzialna za fizyczn¹ czêœæ tabeli wyników (bez czêœci graficznej). Posiada tablicê instancji klasy ScoreboardItem. Ma konstruktor wywo³ywany przy tworzeniu tablicy wyników s³u¿¹cy do ustawienia d³ugoœci tablicy odpowiedzialnej za elementy tabeli wyników (domyœlnie 10) i przypisanie ka¿demu elementowi nowego (pustego) obiektu. Znajduj¹ siê w niej równie¿ metody odpowiedzialne za dodawanie elementów jeœli ich wartoœci puntków s¹ wiêksze od wartoœci punktów któregokolwiek elementu w tablicy i sprawdzenie, czy wynik w ogóle zosta³ pobity. Klasa posiada getter i setter tabeli elementów.
-Klasa ScoreboardItem - klasa odpowiedzialna za pojedyñczy element w tabeli wyników. Znajduj¹ siê w niej: iloœæ punktów osi¹gniêtych przez gracza i nazwa gracza. Posiada konstruktor, który do instancji name zapisuje "Noname", a do iloœci punktów wpisuje wartoœæ 0 (pusty element tabeli wyników). Posiada metodê odpowiedzialn¹ za zmianê tych¿e wartoœci w programie, oraz zestaw przeci¹¿onych operatorów logicznych, dzia³aj¹cych na wartoœciach osi¹gniêtego wyniku w obiektach tej klasy.
-Klasa TransformingImage - Klasa dziedzicz¹ca po klasie Image, rozszerzaj¹ca jej mo¿liwoœci o kilka metod u³atwiaj¹cych dzia³anie na obrazkach. Korzysta z niej praktycznie ka¿da klasa znajduj¹ca siê w rozgrywce (Ball, Bonus, Brick, Explosion i Platform). Klasa u¿ywa metod technologii WPF odpowiedzialnych za dzia³ania na obrazku, oraz sam¹ klasê Image. Klasa posiada konstruktor w którym tworzymy obrazek do³¹czony od razu do siatki i ustawiony na konkretnej pozycji na tej siatce. Ponadto mo¿na ustaliæ w nim od razu rozmiary obrazka. Klasa posiada metody odpowiedzialne za przesuwanie i ustawienie pozycji obrazka.
-WindowTextBox - klasa odpowiedzialna za wyœwietlenie okna TextBox'owego (komunikatu z mo¿liwoœci¹ wpisania tekstu), dziedzicz¹ca po klasie Window. Posiada konstruktor podobny do konstruktora wbudowanych w technologiê WPF MessageBox'ów (wpisuje siê opis i tytu³ okienka) z tym, ¿e zosta³a tu jeszcze dodana pozycja w której ma pojawiæ siê okienko. Klasa posiada metody odpowiedzialne za dzia³anie na elementach okna Messagebox'a. Klasa korzysta z technologii WPF (dzia³anie na elementach okna takich jak textbox i przycisk).

Elementy (okienka) stworzone przy u¿yciu XAML-a:
-MainWindow - tworzy okno g³ówne programu. W XAML-u stworzyliœmy tutaj takie elementy jak siatki (grid), przyciski (button), obrazki (Image), oraz szary prostok¹t (rectangle) s³u¿¹cy jako t³o przy wyœwietlaniu Menu w Grze. Z reszty elementów korzystamy w klasie MainWindow przy u¿yciu jêzyka C#.
-WindowTextBox - tworzy okienko MessageBox'a z textboxem. Przy u¿yciu technologii XAML-a stworzyliœmy w tym oknie textbox, przycisk OK i pusty opis. Z reszty elementów korzystamy w klasie WindowTextBox przy u¿yciu jêzyka C#.

Dodatkowe informacje o rozgrywce:
-W grze utworzyliœmy system kolizji oparty o nasuwanie siê na siebie dwóch prostok¹tów (bez wyj¹tków, tzn. pi³eczka równie¿ dzia³a jak prostok¹t).